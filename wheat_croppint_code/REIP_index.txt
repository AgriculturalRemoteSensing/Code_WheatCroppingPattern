var china = ee.FeatureCollection("projects/ee-2418127013/assets/china_border"),
    sentinel = ee.ImageCollection("COPERNICUS/S2");
//////////////////////////cropland/////////////////////////////////////////
var CropLayer = require('users/Nimrod/Package:CropLayer');
var crop = CropLayer.CropLayer();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////Sentinel2(china)//////////////////////////////////////////////////
//////////////////////////////////////////
function maskS2clouds(image) {
  var qa = image.select('QA60');
  var cloudBitMask = Math.pow(2, 10);
  var cirrusBitMask = Math.pow(2, 11);
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
            qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask);
}
//////////////////////////////////////
var cal_ndvi=function(image){
  var time_start = image.get("system:time_start");  
  image=image.multiply(0.0001);
  var blue=image.select('B2');
  var green=image.select('B3');
  var red=image.select('B4');
  var vre1=image.select('B5');
  var vre2=image.select('B6');
  var vre3=image.select('B7');
  var nir=image.select('B8');
  var vre4=image.select('B8A');
  var swir1=image.select('B11');
  var swir2=image.select('B12');
  var EVI2=((nir.subtract(red)).divide(nir.add(red.multiply(2.4)).add(1))).multiply(2.5).rename('EVI2');
  var REIP_1=((red.add(vre3)).divide(2)).subtract(vre1);
  var REIP=((REIP_1.divide(vre2.subtract(vre1))).multiply(40)).add(700).rename('REIP');
  return image.addBands(EVI2).addBands(REIP).set("system:time_start", time_start);
};
//////////////////////////////////////////////////////////////////////////////////////
var Date_Start = ee.Date('2020-01-01');
var Date_End = ee.Date('2020-12-31');
//var Date_window = ee.Number(30);
// Create list of dates for time series
var n_days = Date_End.difference(Date_Start,'day').round();
var dates1 = ee.List.sequence(0,n_days,10);
var make_datelist = function(n) {
  return Date_Start.advance(n,'day');
};
var dates = dates1.map(make_datelist);
var fnc = function(d1) {
  var start = ee.Date(d1);
  var time =ee.Date(d1).advance(4,'day').millis();
  var end = ee.Date(d1).advance(10,'day');
  var date_range = ee.DateRange(start,end);
var S1 = sentinel.filterDate(date_range).map(maskS2clouds);
  var mosaic =S1.median().set('system:time_start',time);
  return mosaic
};
var list_of_images = dates.map(fnc);
var image_mosaic = ee.ImageCollection(list_of_images).filterBounds(china).map(function clip(img){return img.clip(china)});
print(image_mosaic,'image_mosaic')
//////////////////////////////
var  linear=function(imagecollection){
var pkg_smooth = require('users/JFC/math:pkg_smooth.js');
var frame  = 10*3; 
var nodata = -9999;
var imgcol_index = pkg_smooth.linearInterp(imagecollection, frame, nodata);
return imgcol_index;
}
var image_mosaic_B2 = linear(image_mosaic.select('B2')).select('B2').sort('system:time_start');var image_mosaic_B3 = linear(image_mosaic.select('B3')).select('B3').sort('system:time_start');
var image_mosaic_B4 = linear(image_mosaic.select('B4')).select('B4').sort('system:time_start');var image_mosaic_B5 = linear(image_mosaic.select('B5')).select('B5').sort('system:time_start');
var image_mosaic_B6 = linear(image_mosaic.select('B6')).select('B6').sort('system:time_start');var image_mosaic_B7 = linear(image_mosaic.select('B7')).select('B7').sort('system:time_start');
var image_mosaic_B8 = linear(image_mosaic.select('B8')).select('B8').sort('system:time_start');var image_mosaic_B8A = linear(image_mosaic.select('B8A')).select('B8A').sort('system:time_start');
var image_mosaic_B11 = linear(image_mosaic.select('B11')).select('B11').sort('system:time_start');var image_mosaic_B12 = linear(image_mosaic.select('B12')).select('B12').sort('system:time_start');
var image_mosaic_B1 = linear(image_mosaic.select('B1')).select('B1').sort('system:time_start');
var imgcol_mosaic_linear1=image_mosaic_B1.combine(image_mosaic_B2).combine(image_mosaic_B3).combine(image_mosaic_B4).combine(image_mosaic_B5).combine(image_mosaic_B6)
                        .combine(image_mosaic_B7).combine(image_mosaic_B8).combine(image_mosaic_B8A).combine(image_mosaic_B11).combine(image_mosaic_B12);
var imgcol_mosaic_linear=imgcol_mosaic_linear1.sort('system:time_start');
print('imgcol_mosaic_linear',imgcol_mosaic_linear);
var imgcol = imgcol_mosaic_linear.map(cal_ndvi);
var imgcol_EVI2_index1 = imgcol.select('EVI2');
var imgcol_REIP_index1 = imgcol.select('REIP'); 
//--------------------------------WS平滑----------------------------------------------------
/** Initialize weights ------------------------------------------------------ */
function qc_EVI2(img) {
    var w= img.select(0).mask(); 
    return ee.Image(img.select('EVI2'))//.divide(10)
        .addBands(w)
        .rename(['EVI2', 'w'])
        .copyProperties(img, img.propertyNames());
}
function qc_REIP(img) {
    var w= img.select(0).mask(); 
    return ee.Image(img.select('REIP'))//.divide(10)
        .addBands(w)
        .rename(['REIP', 'w'])
        .copyProperties(img, img.propertyNames());
}
var pkg_main   = require('users/yingze/Math:pkg_main');
var pkg_whit   = require('users/yingze/Math:pkg_whit');
/** GLOBAL FUNCTIONS -------------------------------------------------------- */
var date2str = function(x) { return ee.Date(x).format('YYYY_MM_dd'); };
/** ------------------------------------------------------------------------- */
// MAIN SCRIPT 
    /** Initial parameters for whittaker smoother --------------------------- */
    var lambda = 10;
    var mask       = imgcol_EVI2_index1.select('EVI2').mosaic().mask(); 
    /** 1. pre-process mask NA values and init weights */
        var imgcol_EVI2 = imgcol_EVI2_index1.map(function(img) {
        // img = img.unmask(-1.0);
        return ee.Image(qc_EVI2(img)).updateMask(mask);
    });
      var imgcol_REIP = imgcol_REIP_index1.map(function(img) {
        // img = img.unmask(-1.0);
        return ee.Image(qc_REIP(img)).updateMask(mask);
    });
       
    /** 2. Whittaker smoother ------------------------------------------------------ */
    var options_whit = {
        order        : 2,    // difference order
        wFUN         : pkg_whit.wBisquare_array, // weigths updating function
        iters        : 2,    // Whittaker iterations
        min_ValidPerc: 0,    // pixel valid ratio less then `min_ValidPerc`, is not smoothed.
        min_A        : 0.02, // Amplitude A = ylu_max - ylu_min, points are masked if 
                            // A < min_A. If ylu not specified, min_A not work
        missing      : -0.05 // Missing value in band_sm are set to missing.
        // matrixSolve = 1;  // whittaker, matrix solve option:
        // 1:matrixSolve, 2:matrixCholeskyDecomposition, 3:matrixPseudoInverse 
    };
    var whit_EVI2= pkg_whit.whit_imgcol(imgcol_EVI2, options_whit, lambda);
    var mat_zs_EVI2  = whit_EVI2.zs;
    var whit_REIP= pkg_whit.whit_imgcol(imgcol_REIP, options_whit, lambda);
    var mat_zs_REIP  = whit_REIP.zs;
        // var mat_ws  = whit_EVI2.ws;
    /** 3. convert 2d array into multi-bands -------------------------------- */    
    var datelist_EVI2 = ee.List(imgcol_EVI2.aggregate_array('system:time_start')).map(date2str);
    var ids_EVI2 = datelist_EVI2.map(function(val){ return ee.String('b').cat(val); }); 
    var img_WS_EVI2_out = mat_zs_EVI2.arraySlice(1,1,2).arrayProject([0]).arrayFlatten([ids_EVI2]);//only select the last iter,日期必须唯一，否则出错
    var img_WS_REIP_out = mat_zs_REIP.arraySlice(1,1,2).arrayProject([0]).arrayFlatten([ids_EVI2]);//only select the last iter,日期必须唯一，否则出错
    print('imgcol_EVI2_index1',imgcol_EVI2_index1)
    print('img_WS_EVI2_out',img_WS_EVI2_out)
//////////////////////////////////////////////////////////////////////////////////////
  var img_WS_EVI2_out_toarray=img_WS_EVI2_out.toArray();
  print('img_WS_EVI2_out_toarray',img_WS_EVI2_out_toarray)
  function get_EVI2img(i) {
  var subarray = img_WS_EVI2_out_toarray.arraySlice(0, ee.Number(i).int(), ee.Number(i).add(1).int());
  return subarray.arrayProject([0]).arrayFlatten([['EVI2_WS']]);  
  }
  var imgcol_EVI2_index1_tolist=imgcol_EVI2_index1.toList(imgcol_EVI2_index1.size());
  var runLength_EVI2=ee.List.sequence(0, imgcol_EVI2_index1.size().subtract(1));
    var WS_EVI2 = ee.ImageCollection.fromImages(runLength_EVI2.map(function(i) {
  var time=ee.Image(imgcol_EVI2_index1_tolist.get(ee.Number(i))).get('system:time_start');
  return get_EVI2img(i).set('system:time_start',time)
  }));
  // print('WS_EVI2',WS_EVI2)
  Map.addLayer(WS_EVI2, {}, 'WS_EVI2')
  var avgsentinel_EVI2 = WS_EVI2;
  print('WS_EVI2',avgsentinel_EVI2)
  //////////////////////////////////////////////////////////////////////////////
  var img_WS_REIP_out_toarray=img_WS_REIP_out.toArray();
  print('img_WS_REIP_out_toarray',img_WS_REIP_out_toarray)
  function get_REIPimg(i) {
  var subarray = img_WS_REIP_out_toarray.arraySlice(0, ee.Number(i).int(), ee.Number(i).add(1).int());
  return subarray.arrayProject([0]).arrayFlatten([['REIP_WS']]);  
  }
  var imgcol_REIP_index1_tolist=imgcol_REIP_index1.toList(imgcol_REIP_index1.size());
  var runLength_REIP=ee.List.sequence(0, imgcol_REIP_index1.size().subtract(1));
    var WS_REIP = ee.ImageCollection.fromImages(runLength_REIP.map(function(i) {
  var time=ee.Image(imgcol_REIP_index1_tolist.get(ee.Number(i))).get('system:time_start');
  return get_REIPimg(i).set('system:time_start',time)
  }));
  var avgsentinel_REIP = WS_REIP;

/////////////////////////////////////////////////////////////////////////////////////////////
var sentinel_max = avgsentinel_EVI2.filterDate('2020-03-01','2020-06-10').max().rename('EVI2_max');
print('sentinel_max',sentinel_max);
//////////////////////////////////////////////////////////////////////////////////////////
// Define time range
// FULL TS
var startyear = 2020 ;var endyear = 2020;
var startmonth = 03; var endmonth = 06;
var startday = 1; var endday = 10;
// create list for years
var years = ee.List.sequence(startyear,endyear);

var collection_t = avgsentinel_EVI2
  .filter(ee.Filter.calendarRange(startyear,endyear,'year'))
  .filter(ee.Filter.calendarRange(startmonth,endmonth,'month'))
  .sort('system:time_start')
  .select("EVI2_WS");
print('collection_t',collection_t)

var add_bands = function(image) {
  image = ee.Image(image);
  return image.addBands(ee.Image.constant(ee.Number.parse(image.date().format("D"))).rename('day').float());
};

var collection = collection_t.map(add_bands)

var max= ee.ImageCollection(
    years.map(function (y) {
      var start = ee.Date.fromYMD(y, startmonth,startday);
      var stop = ee.Date.fromYMD (y,endmonth,endday);
      var x = collection.filterDate(start, stop)
      var w = x.qualityMosaic('EVI2_WS').select('day')
    return w.set({'year': y})
}).flatten());
var max_dateday1=ee.Image(max.toList(1).get(0));
print('max_dateday1',max_dateday1);
Map.addLayer(max_dateday1, {}, 'max_dateday1')
///////////////////////////////////////////////////////////////////////////////////////////
// Define time range
// FULL TS
var startyear2 = 2020 ;var endyear2 = 2020;
var startmonth2 = 7; var endmonth2 = 9;
var startday2 = 1; var endday2 = 10;
// create list for years
var years2 = ee.List.sequence(startyear2,endyear2);

var collection_t2 = avgsentinel_EVI2
  .filter(ee.Filter.calendarRange(startyear2,endyear2,'year'))
  .filter(ee.Filter.calendarRange(startmonth2,endmonth2,'month'))
  .sort('system:time_start')
  .select("EVI2_WS");
print('collection_t2',collection_t2)

var add_bands2 = function(image) {
  image = ee.Image(image);
  return image.addBands(ee.Image.constant(ee.Number.parse(image.date().format("D"))).rename('day').float());
};

var collection2 = collection_t2.map(add_bands2)
print(collection2,'collection2')

// HERE IS AS I HAVE IMPLEMENTED FOR A TIME-SERIES WITH > 1 YEAR
// Find the day of max for each year
var max2= ee.ImageCollection(
    years2.map(function (y) {
      var start = ee.Date.fromYMD(y, startmonth2,startday2);
      var stop = ee.Date.fromYMD (y,endmonth2,endday2);
      var x = collection2.filterDate(start, stop)
      var w = x.qualityMosaic('EVI2_WS').select('day')
    return w.set({'year': y})
}).flatten());
print('max2',max2);
var max_dateday2=ee.Image(max2.toList(1).get(0));
print('max_dateday2',max_dateday2);
Map.addLayer(max_dateday2, {}, 'max_dateday2');


////////////////////////////////////////////////////////////////////////////////////////////////
var imgcol_REIP_index1_tolist=imgcol_REIP_index1.toList(imgcol_REIP_index1.size());
print('imgcol_REIP_index1_tolist',imgcol_REIP_index1_tolist);
var runLength_REIP = ee.List.sequence(0, imgcol_REIP_index1.size().subtract(1));
var REIP_maskimage=ee.ImageCollection.fromImages(runLength_REIP.map(function(i) {
    var image=ee.Image(imgcol_REIP_index1_tolist.get(ee.Number(i)));
    var image_day=ee.Number.parse(ee.Date(image.get('system:time_start')).difference(ee.Date('2019-12-31'),'day'));//求系统时间与2017.12.31日相差的天数
    var image_constant=image.addBands(ee.Image.constant(image_day).rename('systemday'));
    var image_systemday=image_constant.select('systemday');
    var image_mask=(image_systemday.gte(max_dateday1)).and(image_systemday.lte(max_dateday2));
    return image.updateMask(image_mask);
}).flatten()); 
Map.addLayer(REIP_maskimage, {}, 'REIP_maskimage');
////////////////////////////////////////////////REIP heading12分////////////////////////////////////////////////
var REIP_maskimage_tolist=REIP_maskimage.toList(REIP_maskimage.size());
var runLength_REIP_maskimage = ee.List.sequence(0, REIP_maskimage.size().subtract(2));
var REIP_cafen_heading12=ee.ImageCollection.fromImages(runLength_REIP_maskimage.map(function(i) {
  var image_before=ee.Image(REIP_maskimage_tolist.get(ee.Number(i)));
  var image_after=ee.Image(REIP_maskimage_tolist.get(ee.Number(i).add(1)));
  var image_ca=image_after.subtract(image_before);
  return image_ca;
}).flatten());
///////////////////////////////////////////////////////////////////////////////////
var REIP_cafen_heading12_positive=REIP_cafen_heading12.map(function(img){return img.where(img.lt(0),0)});
var REIP_cafen_heading12_positivesum=REIP_cafen_heading12_positive.sum();
var REIP_cafen_heading12_negitive=REIP_cafen_heading12.map(function(img){return img.where(img.gt(0),0)});
var REIP_cafen_heading12_negitivesum=REIP_cafen_heading12_negitive.sum();
var REIP_cafen_heading12_poDIVneg=REIP_cafen_heading12_positivesum.divide(REIP_cafen_heading12_negitivesum);
REIP_cafen_heading12_poDIVneg=REIP_cafen_heading12_poDIVneg.multiply(100).int().updateMask(crop.gt(0));

Map.addLayer(REIP_cafen_heading12_poDIVneg, {}, 'REIP_cafen_heading12_poDIVneg');
Export.image.toAsset({
  image:REIP_cafen_heading12_poDIVneg.toInt32(),
  description:"lzr_REIP_cafen_heading12_poDIVneg_2020_china",
  assetId:"Lzr_wheat_10m/wheat_H/REIP_cafen_heading12_poDIVneg_2020_china",
  region:china,
  maxPixels:1e13,
  scale:10,
  crs:"EPSG:4326",
});

