var sentinel = ee.ImageCollection("COPERNICUS/S2"),
    china = ee.FeatureCollection("projects/ee-2418127013/assets/Border/initial/china_mainland");

//////////////////////////cropland/////////////////////////////////////////
var CropLayer = require('users/Nimrod/Package:CropLayer');
var crop = CropLayer.CropLayer();

/////////////////////////////////////////////////////Sentinel2(china)//////////////////////////////////////////////////
////////////////////去云//////////////////////
function maskS2clouds(image) {
    var qa = image.select('QA60');
    var cloudBitMask = Math.pow(2, 10);
    var cirrusBitMask = Math.pow(2, 11);
    var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
        qa.bitwiseAnd(cirrusBitMask).eq(0));
    return image.updateMask(mask);
}
////////////////////指数计算//////////////////////
var cal_ndvi = function(image) {
    var time_start = image.get("system:time_start");
    image = image.multiply(0.0001);
    var red = image.select('B4');
    var nir = image.select('B8');
    var EVI2 = ((nir.subtract(red)).divide(nir.add(red.multiply(2.4)).add(1))).multiply(2.5).rename('EVI2');
    return image.addBands(EVI2).set("system:time_start", time_start);
};
/////////////////////////////////////////////////////////影像镶嵌或合成//////////////////////////////////////////
var year = 2020;
var Date_Start = ee.Date.fromYMD(year, 1, 1);
var Date_End = ee.Date.fromYMD(ee.Number(year + 1), 1, 1);
var n_days = Date_End.difference(Date_Start, 'day').round();
var dates1 = ee.List.sequence(0, n_days, 10);
var make_datelist = function(n) {
    return Date_Start.advance(n, 'day');
};
var dates = dates1.map(make_datelist);
var fnc = function(d1) {
    var start = ee.Date(d1);
    var time = ee.Date(d1).advance(4, 'day').millis();
    var end = ee.Date(d1).advance(10, 'day');
    var date_range = ee.DateRange(start, end);
    var S1 = sentinel.filterDate(date_range).map(maskS2clouds);
    var mosaic = S1.median().set('system:time_start', time); ///////////////使用最小值受云干扰小（除短波红外）
    return mosaic
};
var list_of_images = dates.map(fnc);
var image_mosaic = ee.ImageCollection(list_of_images).filterBounds(china).map(function clip(img) {
    return img.clip(china)
});

//////////////////////////////////插值///////////////////////////////////////////////
var linear = function(imagecollection) {
    var pkg_smooth = require('users/JFC/math:pkg_smooth.js');
    var frame = 10 * 3;
    var nodata = -9999;
    var imgcol_index = pkg_smooth.linearInterp(imagecollection, frame, nodata);
    return imgcol_index;
}
var image_mosaic_B4 = linear(image_mosaic.select('B4')).select('B4').sort('system:time_start');
var image_mosaic_B8 = linear(image_mosaic.select('B8')).select('B8').sort('system:time_start');
var imgcol_mosaic_linear1 = image_mosaic_B4.combine(image_mosaic_B8);
var imgcol_mosaic_linear = imgcol_mosaic_linear1.sort('system:time_start');
var imgcol = imgcol_mosaic_linear.map(cal_ndvi);
var imgcol_EVI2_index1 = imgcol.select('EVI2');

//--------------------------------WS平滑----------------------------------------------------
/** Initialize weights ------------------------------------------------------ */
function qc_EVI2(img) {
    var w = img.select(0).mask();
    return ee.Image(img.select('EVI2')) //.divide(10)
        .addBands(w)
        .rename(['EVI2', 'w'])
        .copyProperties(img, img.propertyNames());
}

var pkg_whit = require('users/yingze/Math:pkg_whit');
/** GLOBAL FUNCTIONS -------------------------------------------------------- */
var date2str = function(x) {
    return ee.Date(x).format('YYYY_MM_dd');
};
/** ------------------------------------------------------------------------- */
// MAIN SCRIPT 
/** Initial parameters for whittaker smoother --------------------------- */
var lambda = 10;
var mask = imgcol_EVI2_index1.select('EVI2').mosaic().mask();
/** 1. pre-process mask NA values and init weights */
var imgcol_EVI2 = imgcol_EVI2_index1.map(function(img) {
    // img = img.unmask(-1.0);
    return ee.Image(qc_EVI2(img)).updateMask(mask);
});

/** 2. Whittaker smoother ------------------------------------------------------ */
var options_whit = {
    order: 2, // difference order
    wFUN: pkg_whit.wBisquare_array, // weigths updating function
    iters: 2, // Whittaker iterations
    min_ValidPerc: 0, // pixel valid ratio less then `min_ValidPerc`, is not smoothed.
    min_A: 0.02, // Amplitude A = ylu_max - ylu_min, points are masked if 
    // A < min_A. If ylu not specified, min_A not work
    missing: -0.05 // Missing value in band_sm are set to missing.
};
var whit_EVI2 = pkg_whit.whit_imgcol(imgcol_EVI2, options_whit, lambda);
var mat_zs_EVI2 = whit_EVI2.zs;
var datelist_EVI2 = ee.List(imgcol_EVI2.aggregate_array('system:time_start')).map(date2str);
var ids_EVI2 = datelist_EVI2.map(function(val) {
    return ee.String('b').cat(val);
});
var img_WS_EVI2_out = mat_zs_EVI2.arraySlice(1, 1, 2).arrayProject([0]).arrayFlatten([ids_EVI2]); //only select the last iter,日期必须唯一，否则出错

////////////////////////////////////将EVI2转换成imgcollection//////////////////////////////////////////////////
var img_WS_EVI2_out_toarray = img_WS_EVI2_out.toArray();

function get_EVI2img(i) {
    var subarray = img_WS_EVI2_out_toarray.arraySlice(0, ee.Number(i).int(), ee.Number(i).add(1).int());
    return subarray.arrayProject([0]).arrayFlatten([
        ['EVI2_WS']
    ]);
}
var imgcol_EVI2_index1_tolist = imgcol_EVI2_index1.toList(imgcol_EVI2_index1.size());
var runLength_EVI2 = ee.List.sequence(0, imgcol_EVI2_index1.size().subtract(1));
var WS_EVI2 = ee.ImageCollection.fromImages(runLength_EVI2.map(function(i) {
    var time = ee.Image(imgcol_EVI2_index1_tolist.get(ee.Number(i))).get('system:time_start');
    return get_EVI2img(i).set('system:time_start', time)
}));
var avgsentinel_EVI2 = WS_EVI2;

////////////////////////////////////////////////////////////////////////////////
var upyearsentinel_start = ee.Date.fromYMD(year, 1, 1);
var upyearsentinel_end = ee.Date.fromYMD(year, 6, 5);
var upyearsentinel_EVI2 = WS_EVI2.filterDate(upyearsentinel_start, upyearsentinel_end);
var EVI2_30value = upyearsentinel_EVI2.reduce(ee.Reducer.percentile([30]));
var EVI2_70value = upyearsentinel_EVI2.reduce(ee.Reducer.percentile([70]));

////////////////////////////////////////////////////////////////////////////////
var EVI2_High_70value = upyearsentinel_EVI2.map(function(img) {
    var image = ee.Image(img);
    var imagemask = image.where(image.gte(EVI2_70value), 1);
    var select_image1 = imagemask.updateMask(imagemask.eq(1));
    var select_image = select_image1.unmask(0);

    return select_image;
});

var EVI2_High_70value_List = EVI2_High_70value.toList(16);
var EVI2_Low_30value = upyearsentinel_EVI2.map(function(img) {
    var image = ee.Image(img);
    var imagemask = image.where(image.lte(EVI2_30value), 3);
    var select_image1 = imagemask.updateMask(imagemask.eq(3));
    var select_image = select_image1.unmask(0);
    return select_image;
});
var EVI2_Low_30value_List = EVI2_Low_30value.toList(16);

var EVI2_Med_3070value = upyearsentinel_EVI2.map(function(img) {
    var image = ee.Image(img);
    var imagemask = image.where(image.gt(EVI2_30value).and(image.lt(EVI2_70value)), 2);
    var select_image1 = imagemask.updateMask(imagemask.eq(2));
    var select_image = select_image1.unmask(0);
    return select_image;
});
var EVI2_Med_3070value_List = EVI2_Med_3070value.toList(16);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////Sentinel1(VV)//////////////////////////////////////////////////
var sentinel1 = ee.ImageCollection("COPERNICUS/S1_GRD");

var collectionVV = sentinel1
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
    .filterMetadata('resolution_meters', 'equals', 10).select('VV')

var mosaic_image = function(image, Date_Start, Date_End, interval_time, region) {
    var n_days = Date_End.difference(Date_Start, 'day').round();
    var dates1 = ee.List.sequence(0, n_days, interval_time);
    var make_datelist = function(n) {
        return Date_Start.advance(n, 'day');
    };
    var dates = dates1.map(make_datelist);
    var fnc = function(d1) {
        var start = ee.Date(d1);
        var time = ee.Date(d1).advance(interval_time.divide(2), 'day').millis();
        var end = ee.Date(d1).advance(interval_time, 'day');
        var date_range = ee.DateRange(start, end);
        var S1 = image.filterDate(date_range)
        var mosaic = S1.median().set('system:time_start', time);
        return mosaic;
    };
    var list_of_images = dates.map(fnc);
    var image_mosaic = ee.ImageCollection(list_of_images).filterBounds(region).map(function clip(img) {
        return img.clip(region)
    });
    return image_mosaic
}
var interval_time = ee.Number(10);
var linear = function(imagecollection) {
    var pkg_smooth = require('users/JFC/math:pkg_smooth.js')
    var frame = 10 * 3;
    var nodata = -9999;
    var imgcol_index = pkg_smooth.linearInterp(imagecollection, frame, nodata);
    return imgcol_index;
}


var image_mosaic_VV1 = mosaic_image(collectionVV, Date_Start, Date_End, interval_time, china);
var image_mosaic_VV = linear(image_mosaic_VV1).select('VV').sort('system:time_start');

//--------------------------------WS平滑----------------------------------------------------
/** Initialize weights ------------------------------------------------------ */
function qc_VV(img) {
    var w = img.select(0).mask();
    return ee.Image(img.select('VV')) //.divide(10)
        .addBands(w)
        .rename(['VV', 'w'])
        .copyProperties(img, img.propertyNames());
}
var pkg_whit = require('users/yingze/Math:pkg_whit');
/** GLOBAL FUNCTIONS -------------------------------------------------------- */
var date2str = function(x) {
    return ee.Date(x).format('YYYY_MM_dd');
};
/** ------------------------------------------------------------------------- */
// MAIN SCRIPT 
/** Initial parameters for whittaker smoother --------------------------- */
var lambda = 10;
var mask = image_mosaic_VV.select('VV').mosaic().mask();
/** 1. pre-process mask NA values and init weights */
var imgcol_VV = image_mosaic_VV.map(function(img) {
    // img = img.unmask(-1.0);
    return ee.Image(qc_VV(img)).updateMask(mask);
});

/** 2. Whittaker smoother ------------------------------------------------------ */
var options_whit = {
    order: 2, // difference order
    wFUN: pkg_whit.wBisquare_array, // weigths updating function
    iters: 2, // Whittaker iterations
    min_ValidPerc: 0, // pixel valid ratio less then `min_ValidPerc`, is not smoothed.
    min_A: 0.02, // Amplitude A = ylu_max - ylu_min, points are masked if 
    // A < min_A. If ylu not specified, min_A not work
    missing: -0.05 // Missing value in band_sm are set to missing.
};
var whit_VV = pkg_whit.whit_imgcol(imgcol_VV, options_whit, lambda);
var mat_zs_VV = whit_VV.zs;
// var mat_ws  = whit_EVI2.ws;
/** 3. convert 2d array into multi-bands -------------------------------- */
var datelist_VV = ee.List(imgcol_VV.aggregate_array('system:time_start')).map(date2str);
var ids_VV = datelist_VV.map(function(val) {
    return ee.String('b').cat(val);
});
var img_WS_VV_out = mat_zs_VV.arraySlice(1, 1, 2).arrayProject([0]).arrayFlatten([ids_VV]); //only select the last iter,日期必须唯一，否则出错

////////////////////////////////////将VV转换成imgcollection//////////////////////////////////////////////////
var img_WS_VV_out_toarray = img_WS_VV_out.toArray();

function get_VVimg(i) {
    var subarray = img_WS_VV_out_toarray.arraySlice(0, ee.Number(i).int(), ee.Number(i).add(1).int());
    return subarray.arrayProject([0]).arrayFlatten([
        ['VV_WS']
    ]);
}
var imgcol_VV_index1_tolist = image_mosaic_VV.toList(image_mosaic_VV.size());
var runLength_VV = ee.List.sequence(0, image_mosaic_VV.size().subtract(1));
var WS_VV = ee.ImageCollection.fromImages(runLength_VV.map(function(i) {
    var time = ee.Image(imgcol_VV_index1_tolist.get(ee.Number(i))).get('system:time_start');
    return get_VVimg(i).set('system:time_start', time)
}));
var avgsentinel_VV = WS_VV;

//////////////////////////////////////////VV 前半年分位值  30  70////////////////////////////////////////////
var upyearsentinel_VV = WS_VV.filterDate('2020-01-01', '2020-06-05'); //第1-16期:'2020-01-01','2020-05-26';第16-30期:'2020-05-26','2020-10-24'%%%%%%%%%
var VV_30value = upyearsentinel_VV.reduce(ee.Reducer.percentile([30])); //VV百分之30分位的值
var VV_70value = upyearsentinel_VV.reduce(ee.Reducer.percentile([70])); //VV百分之70分位的值

//////////////////////////VV高值赋值为4 ///////////////////////////
var VV_High_70value = upyearsentinel_VV.map(function(img) {
    var image = ee.Image(img);
    var imagemask = image.where(image.gte(VV_70value), 4);
    var select_image1 = imagemask.updateMask(imagemask.eq(4));
    var select_image = select_image1.unmask(0);
    return select_image;
});
var VV_High_70value_List = VV_High_70value.toList(16);

///////////////////////////VV低值赋值为6/////////////////////////
var VV_Low_30value = upyearsentinel_VV.map(function(img) {
    var image = ee.Image(img);
    // var select_image=image.where(image.lte(CRI550_50value),image);
    var imagemask = image.where(image.lte(VV_30value), 6);
    var select_image1 = imagemask.updateMask(imagemask.eq(6));
    var select_image = select_image1.unmask(0);
    return select_image;
});
var VV_Low_30value_List = VV_Low_30value.toList(16);

///////////////////////////VV中值赋值为5/////////////////////////
var VV_Med_3070value = upyearsentinel_VV.map(function(img) {
    var image = ee.Image(img);
    // var select_image=image.where(image.lte(CRI550_50value),image);
    var imagemask = image.where(image.gt(VV_30value).and(image.lt(VV_70value)), 5);
    var select_image1 = imagemask.updateMask(imagemask.eq(5));
    var select_image = select_image1.unmask(0);
    return select_image;
});

var VV_Med_3070value_List = VV_Med_3070value.toList(16);

///////////////////////////////////////////////////////////EVI2+VV  ALL vaule/////////////////////////////////////
var runLength = ee.List.sequence(0, VV_Med_3070value_List.size().subtract(1))
var EVI2_VV_allvaule_Coll = ee.ImageCollection.fromImages(runLength.map(function(i) {
    var VV_imageH = ee.Image(VV_High_70value_List.get(ee.Number(i)));
    var VV_imageM = ee.Image(VV_Med_3070value_List.get(ee.Number(i)));
    var VV_imageL = ee.Image(VV_Low_30value_List.get(ee.Number(i)));
    var EVI2_imageH = ee.Image(EVI2_High_70value_List.get(ee.Number(i)));
    var EVI2_imageM = ee.Image(EVI2_Med_3070value_List.get(ee.Number(i)));
    var EVI2_imageL = ee.Image(EVI2_Low_30value_List.get(ee.Number(i)));
    var time = VV_imageH.get('system:time_start')
    var image_day = ee.Number.parse(ee.Date(time).difference(ee.Date('2019-12-31'), 'day')).toInt();
    var VV_image = VV_imageH.add(VV_imageM).add(VV_imageL).rename('result');
    var EVI2_image = EVI2_imageH.add(EVI2_imageM).add(EVI2_imageL).rename('result');
    EVI2_image = EVI2_image.multiply(10);
    var image = VV_image.add(EVI2_image);
    image = image.where(image.eq(16), 1); 
    image = image.updateMask(image.eq(1));
    image = image.unmask(0);
    var constant = image.addBands(image_day).toInt()
    return constant.set('system:time_start', time).rename(['result', 'day'])
}))

var runLength2 = ee.List.sequence(0, EVI2_VV_allvaule_Coll.size().subtract(1))
var EVI2_VV_allvaule_Coll_toList = EVI2_VV_allvaule_Coll.toList(EVI2_VV_allvaule_Coll.size())
var Final = ee.ImageCollection.fromImages(runLength2.map(function(i) {
    var image = ee.Image(EVI2_VV_allvaule_Coll_toList.get(ee.Number(i)))
    var time = image.get('system:time_start')
    var day = image.select('day')
    var result = image.select('result')
    var mask = (day.gte(46)).and(day.lte(126))
    var final = result.multiply(mask)
    return final.set('system:time_start', time)
}));
/////////result///////
var Couple_EVI2_VV = Final.sum().updateMask(crop.gt(0)).clip(china);
Map.addLayer(Couple_EVI2_VV, {}, 'Couple_EVI2_VV', false);
