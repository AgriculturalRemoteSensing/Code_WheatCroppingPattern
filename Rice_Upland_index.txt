/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var china = ee.FeatureCollection("projects/ee-2418127013/assets/china_mainland"),
    sentinel = ee.ImageCollection("COPERNICUS/S2");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//////////////////////////cropland//////////////////
var CropLayer = require('users/Nimrod/Package:CropLayer');
var crop = CropLayer.CropLayer();
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
function maskS2clouds(image) {
    var qa = image.select('QA60');
    var cloudBitMask = Math.pow(2, 10);
    var cirrusBitMask = Math.pow(2, 11);
    var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
        qa.bitwiseAnd(cirrusBitMask).eq(0));
    return image.updateMask(mask);
}

/////////////////////////////////////////
var cal_ndvi = function(image) {
    var time_start = image.get("system:time_start");
    image = image.multiply(0.0001);
    var red = image.select('B4');
    var nir = image.select('B8');
    var EVI2 = ((nir.subtract(red)).divide(nir.add(red.multiply(2.4)).add(1))).multiply(2.5).rename('EVI2');
    return image.addBands(EVI2).set("system:time_start", time_start);
};
//////////////////////////////////////////
var year = 2020;
var Date_Start = ee.Date.fromYMD(year, 1, 1);
var Date_End = ee.Date.fromYMD(ee.Number(year + 1), 1, 1);
var n_days = Date_End.difference(Date_Start, 'day').round();
var dates1 = ee.List.sequence(0, n_days, 10);
var make_datelist = function(n) {
    return Date_Start.advance(n, 'day');
};
var dates = dates1.map(make_datelist);
var fnc = function(d1) {
    var start = ee.Date(d1);
    var time = ee.Date(d1).advance(4, 'day').millis();
    var end = ee.Date(d1).advance(10, 'day');
    var date_range = ee.DateRange(start, end);
    var S1 = sentinel.filterDate(date_range).map(maskS2clouds);
    var mosaic = S1.median().set('system:time_start', time);
    return mosaic
};
var list_of_images = dates.map(fnc);
var image_mosaic = ee.ImageCollection(list_of_images).filterBounds(china).map(function clip(img) {
    return img.clip(china)
});

////////////////////////////////////////////////////////////////////////
var linear = function(imagecollection) {
    var pkg_smooth = require('users/JFC/math:pkg_smooth.js');
    var frame = 10 * 3;
    var nodata = -9999;
    var imgcol_index = pkg_smooth.linearInterp(imagecollection, frame, nodata);
    return imgcol_index;
}
var image_mosaic_B4 = linear(image_mosaic.select('B4')).select('B4').sort('system:time_start');
var image_mosaic_B8 = linear(image_mosaic.select('B8')).select('B8').sort('system:time_start');
var imgcol_mosaic_linear1 = image_mosaic_B4.combine(image_mosaic_B8);
var imgcol_mosaic_linear = imgcol_mosaic_linear1.sort('system:time_start');
var imgcol = imgcol_mosaic_linear.map(cal_ndvi);
var imgcol_EVI2_index1 = imgcol.select('EVI2');
//--------------------------------WS----------------------------------------------------
/** Initialize weights ------------------------------------------------------ */
function qc_EVI2(img) {
    var w = img.select(0).mask();
    return ee.Image(img.select('EVI2'))
        .addBands(w)
        .rename(['EVI2', 'w'])
        .copyProperties(img, img.propertyNames());
}
var pkg_whit = require('users/yingze/Math:pkg_whit');
/** GLOBAL FUNCTIONS -------------------------------------------------------- */
var date2str = function(x) {
    return ee.Date(x).format('YYYY_MM_dd');
};
/** ------------------------------------------------------------------------- */
// MAIN SCRIPT 
/** Initial parameters for whittaker smoother --------------------------- */
var lambda = 10;
var mask = imgcol_EVI2_index1.select('EVI2').mosaic().mask();
/** 1. pre-process mask NA values and init weights */
var imgcol_EVI2 = imgcol_EVI2_index1.map(function(img) {
    // img = img.unmask(-1.0);
    return ee.Image(qc_EVI2(img)).updateMask(mask);
});
/** 2. Whittaker smoother ------------------------------------------------------ */
var options_whit = {
    order: 2, // difference order
    wFUN: pkg_whit.wBisquare_array, // weigths updating function
    iters: 2, // Whittaker iterations
    min_ValidPerc: 0, // pixel valid ratio less then `min_ValidPerc`, is not smoothed.
    min_A: 0.02, // Amplitude A = ylu_max - ylu_min, points are masked if 
    // A < min_A. If ylu not specified, min_A not work
    missing: -0.05 // Missing value in band_sm are set to missing.
    // matrixSolve = 1;  // whittaker, matrix solve option:
    // 1:matrixSolve, 2:matrixCholeskyDecomposition, 3:matrixPseudoInverse 
};
var whit_EVI2 = pkg_whit.whit_imgcol(imgcol_EVI2, options_whit, lambda);
var mat_zs_EVI2 = whit_EVI2.zs;
/** 3. convert 2d array into multi-bands -------------------------------- */
var datelist_EVI2 = ee.List(imgcol_EVI2.aggregate_array('system:time_start')).map(date2str);
var ids_EVI2 = datelist_EVI2.map(function(val) {
    return ee.String('b').cat(val);
});
var img_WS_EVI2_out = mat_zs_EVI2.arraySlice(1, 1, 2).arrayProject([0]).arrayFlatten([ids_EVI2]); //only select the last iter,日期必须唯一，否则出错
/////////////////////////////////////////////////////////////////////////
var img_WS_EVI2_out_toarray = img_WS_EVI2_out.toArray();
function get_EVI2img(i) {
    var subarray = img_WS_EVI2_out_toarray.arraySlice(0, ee.Number(i).int(), ee.Number(i).add(1).int());
    return subarray.arrayProject([0]).arrayFlatten([
        ['EVI2_WS']
    ]);
}
var imgcol_EVI2_index1_tolist = imgcol_EVI2_index1.toList(imgcol_EVI2_index1.size());
var runLength_EVI2 = ee.List.sequence(0, imgcol_EVI2_index1.size().subtract(1));
var WS_EVI2 = ee.ImageCollection.fromImages(runLength_EVI2.map(function(i) {
    var time = ee.Image(imgcol_EVI2_index1_tolist.get(ee.Number(i))).get('system:time_start');
    return get_EVI2img(i).set('system:time_start', time)
}));
var avgsentinel_EVI2 = WS_EVI2;

//////////////////////////////////////////////////////////
var upyearsentinel_start = ee.Date.fromYMD(year, 6, 6);
var upyearsentinel_end = ee.Date.fromYMD(year, 11, 13);
var downyearsentinel_EVI2 = WS_EVI2.filterDate(upyearsentinel_start, upyearsentinel_end);
var EVI2_70value=downyearsentinel_EVI2.reduce(ee.Reducer.percentile([70]));//EVI2百分之70分位的值
// /////////////////////////////////////////////////
var EVI2_High_70value=downyearsentinel_EVI2.map(function(img)
{
  var image = ee.Image(img);
  var imagemask=image.where(image.gte(EVI2_70value),1);
  var select_image1=imagemask.updateMask(imagemask.eq(1));
  var select_image=select_image1.unmask(0);
  return select_image;
});
var EVI2_High_70value_List=EVI2_High_70value.toList(16);
// ////////////////////Sentinel1(VV)////////////////////
var sentinel1 = ee.ImageCollection("COPERNICUS/S1_GRD");
var collectionVV = sentinel1    
.filter(ee.Filter.eq('instrumentMode', 'IW'))    
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))    
.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))    
.filterMetadata('resolution_meters', 'equals' , 10).select('VV')
var mosaic_image=function(image,Date_Start,Date_End,interval_time,region){
  var n_days = Date_End.difference(Date_Start,'day').round();
  var dates1 = ee.List.sequence(0,n_days,interval_time);
  var make_datelist = function(n) {
    return Date_Start.advance(n,'day');
  };
  var dates = dates1.map(make_datelist);
  var fnc = function(d1) {
    var start = ee.Date(d1);
    var time =ee.Date(d1).advance(interval_time.divide(2),'day').millis();
    var end = ee.Date(d1).advance(interval_time,'day');
    var date_range = ee.DateRange(start,end);
    var S1 = image.filterDate(date_range)//.map(maskS2clouds);
    var mosaic =S1.median().set('system:time_start',time);
    return mosaic;
  };
  var list_of_images = dates.map(fnc);
  var image_mosaic = ee.ImageCollection(list_of_images).filterBounds(region).map(function clip(img){return img.clip(region)});
  return image_mosaic
}
var interval_time=ee.Number(10);
var  linear=function(imagecollection){
var pkg_smooth     = require('users/JFC/math:pkg_smooth.js')
var frame  = 10*3; 
var nodata = -9999;
var imgcol_index = pkg_smooth.linearInterp(imagecollection, frame, nodata);
return imgcol_index;
}
var year=2021;
var Date_Start = ee.Date.fromYMD(ee.Number(year),1,1);
var Date_End = ee.Date.fromYMD(ee.Number(year+1),1,1);
var image_mosaic_VV1=mosaic_image(collectionVV,Date_Start,Date_End,interval_time,china);
var image_mosaic_VV = linear(image_mosaic_VV1).select('VV').sort('system:time_start');

//--------------------------------WS----------------------------------------------------
/** Initialize weights ------------------------------------------------------ */
function qc_VV(img) {
    var w= img.select(0).mask(); 
    return ee.Image(img.select('VV'))
        .addBands(w)
        .rename(['VV', 'w'])
        .copyProperties(img, img.propertyNames());
}
var pkg_main   = require('users/yingze/Math:pkg_main');
var pkg_whit   = require('users/yingze/Math:pkg_whit');
/** GLOBAL FUNCTIONS -------------------------------------------------------- */
var date2str = function(x) { return ee.Date(x).format('YYYY_MM_dd'); };
/** ------------------------------------------------------------------------- */
// MAIN SCRIPT 
    /** Initial parameters for whittaker smoother --------------------------- */
    var lambda = 10;
    var mask       = image_mosaic_VV.select('VV').mosaic().mask(); 
    /** 1. pre-process mask NA values and init weights */
        var imgcol_VV = image_mosaic_VV.map(function(img) {
        // img = img.unmask(-1.0);
        return ee.Image(qc_VV(img)).updateMask(mask);
    });
       
    /** 2. Whittaker smoother ------------------------------------------------------ */
    var options_whit = {
        order        : 2,    // difference order
        wFUN         : pkg_whit.wBisquare_array, // weigths updating function
        iters        : 2,    // Whittaker iterations
        min_ValidPerc: 0,    // pixel valid ratio less then `min_ValidPerc`, is not smoothed.
        min_A        : 0.02, // Amplitude A = ylu_max - ylu_min, points are masked if 
                            // A < min_A. If ylu not specified, min_A not work
        missing      : -0.05 // Missing value in band_sm are set to missing.
        // matrixSolve = 1;  // whittaker, matrix solve option:
        // 1:matrixSolve, 2:matrixCholeskyDecomposition, 3:matrixPseudoInverse 
    };
    var whit_VV= pkg_whit.whit_imgcol(imgcol_VV, options_whit, lambda);
    var mat_zs_VV  = whit_VV.zs;
        // var mat_ws  = whit_EVI2.ws;
    /** 3. convert 2d array into multi-bands -------------------------------- */    
    var datelist_VV = ee.List(imgcol_VV.aggregate_array('system:time_start')).map(date2str);
    var ids_VV = datelist_VV.map(function(val){ return ee.String('b').cat(val); }); 
    var img_WS_VV_out = mat_zs_VV.arraySlice(1,1,2).arrayProject([0]).arrayFlatten([ids_VV]);
 
////////////////////////////////////////////////////////////////////////////////
  var img_WS_VV_out_toarray=img_WS_VV_out.toArray();
  function get_VVimg(i) {
  var subarray = img_WS_VV_out_toarray.arraySlice(0, ee.Number(i).int(), ee.Number(i).add(1).int());
  return subarray.arrayProject([0]).arrayFlatten([['VV_WS']]);  
  }
  var imgcol_VV_index1_tolist=image_mosaic_VV.toList(image_mosaic_VV.size());
  var runLength_VV=ee.List.sequence(0, image_mosaic_VV.size().subtract(1));
    var WS_VV = ee.ImageCollection.fromImages(runLength_VV.map(function(i) {
  var time=ee.Image(imgcol_VV_index1_tolist.get(ee.Number(i))).get('system:time_start');
  return get_VVimg(i).set('system:time_start',time)
  }));
  var avgsentinel_VV = WS_VV;

//////////////////////////////////////////////////////////////////////////////////
var upyearsentinel_VV = WS_VV.filterDate('2021-01-01','2021-06-05');
var U_VV_50value=upyearsentinel_VV.reduce(ee.Reducer.percentile([50]));

////////////////////////////////////////////////////////////////////////////////////
var upyearsentinel_start = ee.Date.fromYMD(year, 6, 6);
var upyearsentinel_end = ee.Date.fromYMD(year, 11, 13);
var downyearsentinel_VV = WS_VV.filterDate(upyearsentinel_start, upyearsentinel_end);

///////////////
var diff_VV = downyearsentinel_VV.map(function(img)
{
  var image = ee.Image(img);
  var image_diff = image.subtract(U_VV_50value);
  var image_diff_positive = image_diff.gt(0).where(image_diff.gt(0),1);
  var image_diff_negative = image_diff.lt(0).where(image_diff.lt(0),2);
  var img_diff_pone = image_diff_positive.add(image_diff_negative);
  return img_diff_pone;
});
var diff_VV_List=diff_VV.toList(16);

/////////////
var runLength2=ee.List.sequence(0,diff_VV.size().subtract(1))
var EVI2_VV_allvaule_Coll=ee.ImageCollection.fromImages(runLength2.map(function(i){
  var EVI2_imageH=ee.Image(EVI2_High_70value_List.get(ee.Number(i)));
  var VV_imageM=ee.Image(diff_VV_List.get(ee.Number(i)));
  var VV_image=VV_imageM.rename('result');
  var EVI2_image_1=EVI2_imageH.rename('result');
  var EVI2_image=EVI2_image_1.multiply(10);
  var image=VV_image.add(EVI2_image);
  var image_1=image.where(image.eq(1),0);
  var image_2=image_1.where(image_1.eq(2),0);
  var image_H=image_2.where(image_2.eq(11),1);
  var image_result=image_H.where(image_H.eq(12),10);
  return image_result
}));

//////////////////////////////////////////////////////
var VV_D_avg=EVI2_VV_allvaule_Coll.sum();
var VV_D_1=VV_D_avg.where(VV_D_avg.eq(5),1);
var VV_D_2=VV_D_1.where(VV_D_1.eq(14),2);
var VV_D_3=VV_D_2.where(VV_D_2.eq(23),3);
var VV_D_4=VV_D_3.where(VV_D_3.eq(32),4);
var VV_D_5=VV_D_4.where(VV_D_4.eq(41),5);
var VV_D_6=VV_D_5.where(VV_D_5.eq(50),6);
///////////////D_RH////////////////////
var VV_D_RH_avg_result=VV_D_6.updateMask(crop.gt(0));
///////////////////////toAsset//////////////////////
 Export.image.toAsset({
  image:VV_D_RH_avg_result.toInt32(),
  description:"VV_D_RH",
  assetId:"projects/ee-g1083018/assets/VV_D_RH",
  region:china,
  maxPixels:1e13,
  scale:10,
  crs:"EPSG:4326",
});